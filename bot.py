import asyncio
import logging
from datetime import datetime
from aiogram.utils.formatting import Text, Bold
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.filters.command import Command, CommandObject
from aiogram.types import Message
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from config_reader import config
from aiogram.utils.formatting import (
    Bold, as_list, as_marked_section, as_key_value, HashTag
)
from aiogram import html
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.markdown import hide_link





logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")


# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("Hello!")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.answer("Test 1")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
# –ë–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞, —Ç.–∫. —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∏–∂–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main()
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")


@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç')
    print(message)

@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')



@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji=DiceEmoji.DICE)


@dp.message(Command("dice1"))
async def cmd_dice1(message: types.Message, bot: Bot):
    # await bot.send_dice(-4041465293, emoji="üé≤")
    await bot.send_message(-4026064859, "Hello!")



@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")


@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")


@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω {started_at}")


@dp.message(Command("start", prefix="/"))
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("Hi!\nI'm EchoBot!\nPowered by aiogram.")


# @dp.message()
# async def echo(message: types.Message):
#     # old style:
#     # await bot.send_message(message.chat.id, message.text)
#
#     await message.answer(message.text)


@dp.message(F.text, Command("test3"))
async def any_message(message: Message):
    await message.answer(
        text='<a href="http://google.com">google.com</a>.',
        parse_mode=ParseMode.HTML
    )
    await message.answer(
        "Hello, *world*\!",
        parse_mode=ParseMode.MARKDOWN_V2
    )

@dp.message(Command("hello"))
async def cmd_hello(message: Message):
    await message.answer(
        f"Hello, {html.bold(html.quote(message.from_user.full_name))}",
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("hello2"))
async def cmd_hello1(message: Message):
    content = Text(
        "Hello, ",
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()
    )

#
# @dp.message(F.text)
# async def echo_with_time(message: Message):
#     # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
#     time_now = datetime.now().strftime('%H:%M')
#     # –°–æ–∑–¥–∞—ë–º –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç
#     added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
#     await message.answer(f"{message.html_text}\n\n{added_text}", parse_mode="HTML")


@dp.message(Command("advanced_example"))
async def cmd_advanced_example(message: Message):
    content = as_list(
        as_marked_section(
            Bold("Success:"),
            "Test 1",
            "Test 3",
            "Test 4",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("Failed:"),
            "Test 2",
            marker="‚ùå ",
        ),
        as_marked_section(
            Bold("Summary:"),
            as_key_value("Total", 4),
            as_key_value("Success", 3),
            as_key_value("Failed", 1),
            marker="  ",
        ),
        HashTag("#test"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs())


# @dp.message(F.text)
# async def extract_data(message: Message):
#     data = {
#         "url": "<N/A>",
#         "email": "<N/A>",
#         "code": "<N/A>"
#     }
#     entities = message.entities or []
#     for item in entities:
#         if item.type in data.keys():
#             # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
#             # data[item.type] = message.text[item.offset : item.offset+item.length]
#             # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
#             data[item.type] = item.extract_from(message.text)
#     await message.reply(
#         "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
#         f"URL: {html.quote(data['url'])}\n"
#         f"E-mail: {html.quote(data['email'])}\n"
#         f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])}"
#     )


@dp.message(Command("settimer"))
async def cmd_settimer(
        message: Message,
        command: CommandObject
):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/settimer <time> <message>"
        )
        return
    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
    )


# –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤....vv...
@dp.message(Command("custom2", prefix="!"))
async def cmd_custom2(message: Message):
    await message.answer("–ò —ç—Ç—É —Ç–æ–∂–µ –≤–∏–∂—É!")



@dp.message(Command('images'))
async def upload_photo(message: Message):
    # –°—é–¥–∞ –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏–º–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    file_ids = []

    # –ß—Ç–æ–±—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å BufferedInputFile, –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º"
    # –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ `open()`. –ù–æ, –≤–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–±
    # –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤ –∏–∑ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    # –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫–∏—Ö-–ª–∏–±–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ Pillow
    with open("gallery5.jpg", "rb") as image_from_buffer:
        result = await message.answer_photo(
            BufferedInputFile(
                image_from_buffer.read(),
                filename="image from buffer.jpg"
            ),
            caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞"
        )
        file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("gallery5.jpg")
    result = await message.answer_photo(
        image_from_pc,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    )
    file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    image_from_url = URLInputFile("https://www.simplilearn.com/ice9/free_resources_article_thumb/what_is_image_Processing.jpg")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"+"\n".join(file_ids))


@dp.message(F.photo)
async def download_photo(message: Message, bot: Bot):
    await bot.download(
        message.photo[-1],
        destination=f"/tmp/{message.photo[-1].file_id}.jpg"
    )
    print(message.photo[-1].file_id)


@dp.message(F.sticker)
async def download_sticker(message: Message, bot: Bot):
    await bot.download(
        message.sticker,
        # –¥–ª—è Windows –ø—É—Ç–∏ –Ω–∞–¥–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å
        destination=f"/tmp/{message.sticker.file_id}.webp"
    )





@dp.message(Command("album"))
async def cmd_album(message: Message):
    album_builder = MediaGroupBuilder(
        caption="–û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∞–ª—å–±–æ–º–∞"
    )
    album_builder.add(
        type="photo",
        media=FSInputFile("gallery5.jpg"),
        caption="–ü–æ–¥–ø–∏—Å—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–µ–¥–∏–∞ Gallery5"

    )
    # –ï—Å–ª–∏ –º—ã —Å—Ä–∞–∑—É –∑–Ω–∞–µ–º —Ç–∏–ø, —Ç–æ –≤–º–µ—Å—Ç–æ –æ–±—â–µ–≥–æ add
    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å add_<—Ç–∏–ø>
    album_builder.add_photo(
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –∏–ª–∏ file_id –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–∞–∑—É —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
        media="https://picsum.photos/seed/groosha/400/300"
    )
    album_builder.add_photo(
        media="AgACAgIAAxkBAAIBK2WOpYn5Qd_jKf6g6ZpsD1sj9bzjAAKG1DEbI1l5SPEVkW11Di5ZAQADAgADeQADNAQ"
    )
    await message.answer_media_group(
        # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–∑–≤–∞—Ç—å build()
        media=album_builder.build()
    )


@dp.message(F.new_chat_members)
async def somebody_added(message: Message):
    for user in message.new_chat_members:
        # –ø—Ä–æ–ø–µ—Ä—Ç–∏ full_name –±–µ—Ä—ë—Ç —Å—Ä–∞–∑—É –∏–º—è –ò —Ñ–∞–º–∏–ª–∏—é
        # (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤—ã—à–µ —É —é–∑–µ—Ä–æ–≤ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏)
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}")




@dp.message(Command("hidden_link"))
async def cmd_hidden_link(message: Message):
    await message.answer(
        f"{hide_link('https://telegra.ph/file/562a512448876923e28c3.png')}"
        f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram: *—Å—É—â–µ—Å—Ç–≤—É–µ—Ç*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: *–Ω–µ —á–∏—Ç–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é*\n"
        f"–ì—Ä—É—à–∞:",
        parse_mode=ParseMode.HTML
    )



async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä cmd_test2 –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
    dp.message.register(cmd_test2, Command("test2"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ
    # –î–∞, —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ–ª–ª–∏–Ω–≥
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, mylist=[1, 2, 3])



if __name__ == "__main__":
    asyncio.run(main())